
\input texinfo @c -*- texinfo -*-
@c %**start of header
@setfilename tcc-doc.info
@settitle Tiny C Compiler Reference Documentation
@dircategory Software development
@direntry
* TCC: (tcc-doc).               The Tiny C Compiler.
@end direntry
@c %**end of header

@include config.texi

@iftex
@titlepage
@afourpaper
@sp 7
@center @titlefont{Tiny C Compiler Reference Documentation}
@sp 3
@end titlepage
@headings double
@end iftex

@contents

@node Top, Introduction, (dir), (dir)
@top Tiny C Compiler Reference Documentation

This manual documents version @value{VERSION} of the Tiny C Compiler.

@menu
* Introduction::                Introduction to tcc.
* Invoke::                      Invocation of tcc (command line, options).
* Clang::                       ANSI C and extensions.
* asm::                         Assembler syntax.
* linker::                      Output file generation and supported targets.
* Bounds::                      Automatic bounds-checking of C code.
* Libtcc::                      The libtcc library.
* devel::                       Guide for Developers.
@end menu


@node Introduction
@chapter Introduction

TinyCC (aka TCC) is a small but hyper fast C compiler. Unlike other C
compilers, it is meant to be self-relying: you do not need an
external assembler or linker because TCC does that for you.

TCC compiles so @emph{fast} that even for big projects @code{Makefile}s may
not be necessary.

TCC not only supports ANSI C, but also most of the new ISO C99
standard and many GNUC extensions including inline assembly.

TCC can also be used to make @emph{C scripts}, i.e. pieces of C source
that you run as a Perl or Python script. Compilation is so fast that
your script will be as fast as if it was an executable.

TCC can also automatically generate memory and bound checks
(@pxref{Bounds}) while allowing all C pointers operations. TCC can do
these checks even if non patched libraries are used.

With @code{libtcc}, you can use TCC as a backend for dynamic code
generation (@pxref{Libtcc}).

TCC mainly supports the i386 target on Linux and Windows. There are alpha
ports for the ARM (@code{arm-tcc}) and the TMS320C67xx targets
(@code{c67-tcc}). More information about the ARM port is available at
@url{http://lists.gnu.org/archive/html/tinycc-devel/2003-10/msg00044.html}.

For usage on Windows, see also @url{tcc-win32.txt}.

@node Invoke
@chapter Command line invocation

@section Quick start

@example
@c man begin SYNOPSIS
usage: tcc [options] [@var{infile1} @var{infile2}@dots{}] [@option{-run} @var{infile} @var{args}@dots{}]
@c man end
@end example

@noindent
@c man begin DESCRIPTION
TCC options are a very much like gcc options. The main difference is that TCC
can also execute directly the resulting program and give it runtime
arguments.

Here are some examples to understand the logic:

@table @code
@item @samp{tcc -run a.c}
Compile @file{a.c} and execute it directly

@item @samp{tcc -run a.c arg1}
Compile a.c and execute it directly. arg1 is given as first argument to
the @code{main()} of a.c.

@item @samp{tcc a.c -run b.c arg1}
Compile @file{a.c} and @file{b.c}, link them together and execute them. arg1 is given
as first argument to the @code{main()} of the resulting program. 
@ignore 
Because multiple C files are specified, @option{--} are necessary to clearly 
separate the program arguments from the TCC options.
@end ignore

@item @samp{tcc -o myprog a.c b.c}
Compile @file{a.c} and @file{b.c}, link them and generate the executable @file{myprog}.

@item @samp{tcc -o myprog a.o b.o}
link @file{a.o} and @file{b.o} together and generate the executable @file{myprog}.

@item @samp{tcc -c a.c}
Compile @file{a.c} and generate object file @file{a.o}.

@item @samp{tcc -c asmfile.S}
Preprocess with C preprocess and assemble @file{asmfile.S} and generate
object file @file{asmfile.o}.

@item @samp{tcc -c asmfile.s}
Assemble (but not preprocess) @file{asmfile.s} and generate object file
@file{asmfile.o}.

@item @samp{tcc -r -o ab.o a.c b.c}
Compile @file{a.c} and @file{b.c}, link them together and generate the object file @file{ab.o}.

@end table

Scripting:

TCC can be invoked from @emph{scripts}, just as shell scripts. You just
need to add @code{#!/usr/local/bin/tcc -run} at the start of your C source:

@example
#!/usr/local/bin/tcc -run
#include <stdio.h>

int main() 
@{
    printf("Hello World\n");
    return 0;
@}
@end example

TCC can read C source code from @emph{standard input} when @option{-} is used in 
place of @option{infile}. Example:

@example
echo 'main()@{puts("hello");@}' | tcc -run -
@end example
@c man end

@section Option summary

General Options:

@c man begin OPTIONS
@table @option
@item -c
Generate an object file.

@item -o outfile
Put object file, executable, or dll into output file @file{outfile}.

@item -run source [args...]
Compile file @var{source} and run it with the command line arguments
@var{args}. In order to be able to give more than one argument to a
script, several TCC options can be given @emph{after} the
@option{-run} option, separated by spaces:
@example
tcc "-run -L/usr/X11R6/lib -lX11" ex4.c
@end example
In a script, it gives the following header:
@example
#!/usr/local/bin/tcc -run -L/usr/X11R6/lib -lX11
@end example

@item -v
Display TCC version.

@item -vv
Show included files.  As sole argument, print search dirs.  -vvv shows tries too.

@item -bench
Display compilation statistics.

@end table

Preprocessor options:

@table @option
@item -Idir
Specify an additional include path. Include paths are searched in the
order they are specified.

System include paths are always searched after. The default system
include paths are: @file{/usr/local/include}, @file{/usr/include}
and @file{PREFIX/lib/tcc/include}. (@file{PREFIX} is usually
@file{/usr} or @file{/usr/local}).

@item -Dsym[=val]
Define preprocessor symbol @samp{sym} to
val. If val is not present, its value is @samp{1}. Function-like macros can
also be defined: @option{-DF(a)=a+1}

@item -Usym
Undefine preprocessor symbol @samp{sym}.

@item -E
Preprocess only, to stdout or file (with -o).

@end table

Compilation flags:

Note: each of the following options has a negative form beginning with
@option{-fno-}.

@table @option
@item -funsigned-char
Let the @code{char} type be unsigned.

@item -fsigned-char
Let the @code{char} type be signed.

@item -fno-common
Do not generate common symbols for uninitialized data.

@item -fleading-underscore
Add a leading underscore at the beginning of each C symbol.

@item -fms-extensions
Allow a MS C compiler extensions to the language. Currently this
assumes a nested named structure declaration without an identifier
behaves like an unnamed one.

@item -fdollars-in-identifiers
Allow dollar signs in identifiers

@end table

Warning options:

@table @option
@item -w
Disable all warnings.

@end table

Note: each of the following warning options has a negative form beginning with
@option{-Wno-}.

@table @option
@item -Wimplicit-function-declaration
Warn about implicit function declaration.

@item -Wunsupported
Warn about unsupported GCC features that are ignored by TCC.

@item -Wwrite-strings
Make string constants be of type @code{const char *} instead of @code{char
*}.

@item -Werror
Abort compilation if warnings are issued.

@item -Wall 
Activate all warnings, except @option{-Werror}, @option{-Wunusupported} and
@option{-Wwrite-strings}.
